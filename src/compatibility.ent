
<!-- Swap INCLUDE / IGNORE here to switch format -->
<!ENTITY % dualModeXML "INCLUDE">
<!ENTITY % legacyXML "IGNORE">
<!ENTITY % newXML "IGNORE">

<!ENTITY % TESTING "INCLUDE">
<!ENTITY % RELEASE "IGNORE">

<![ %legacyXML; [
	<!-- Entities for the old XML Schema -->
	<!ENTITY umbracoNaviHide "umbracoNaviHide">
	<!ENTITY node "node">
	<!ENTITY data "data">
	<!ENTITY docType "@nodeTypeAlias">
	<!ENTITY hidden "data[@alias = '&umbracoNaviHide;'] = 1">
]]>

<![ %newXML; [
	<!-- Entities for the new (4.5) XML Schema -->
	<!ENTITY umbracoNaviHide "umbracoNaviHide">
	<!ENTITY node "*[@isDoc]">
	<!ENTITY data "*[not(@isDoc)]">
	<!ENTITY docType "name()">
	<!ENTITY hidden "&umbracoNaviHide; = 1">
]]>

<![ %dualModeXML; [
	<!-- Entities for the both Schemas (!) -->
	<!ENTITY umbracoNaviHide "umbracoNaviHide">
	<!ENTITY node "*[@isDoc or self::node]">
	<!ENTITY data "*[not(@isDoc) or name() = 'data']"> 
	<!ENTITY docType "concat(name(self::*[@isDoc]), self::node/@nodeTypeAlias)">
	<!ENTITY hidden "data[@alias = '&umbracoNaviHide;'] = 1 or &umbracoNaviHide; = 1">
]]>


<![ %TESTING; [
	<!-- When used with XSpec for tests -->
	<!-- <!ENTITY isLegacyXMLParam "boolean(not(/$root/*[@isDoc][1]))"> -->
	<!ENTITY isLegacyXMLParam "$isLegacyXML">
	<!ENTITY isNewXMLParam "$isNewXML">
	<!ENTITY QueryString "string">
	<!ENTITY GetMediaSingle "document('../test/fixture-media.xml')//*[@id = .]">
	<!ENTITY GetMediaFull "document('../test/fixture-media.xml')//*[@id = $mediaId]">
	<!ENTITY GetCurrentMember "true">
	<!ENTITY GetXmlNodeByXPath "document('../test/fixture-media.xml')//*[@id]">
	<!ENTITY nodeset-ns-uri "http://exslt.org/common">
	<!ENTITY tokenize "str:tokenize">
	<!ENTITY tokenizeOptions "document('../test/fixture-options')/options">
	<!ENTITY token "token">
	<!ENTITY CompleteQueryString "'f=1&amp;p=2'">
	<!ENTITY remoteAddress "'10.0.1.6'">
]]>

<![ %RELEASE; [
	<!-- In Release Build -->
	<!ENTITY isLegacyXMLParam "$isLegacyXML">
	<!ENTITY isNewXMLParam "$isNewXML">
	<!ENTITY QueryString "umb:RequestQueryString">
	<!ENTITY GetMediaSingle "umb:GetMedia(., false())">
	<!ENTITY GetMediaFull "umb:GetMedia($mediaId, true())">
	<!ENTITY GetCurrentMember "umb:GetCurrentMember">
	<!ENTITY GetXmlNodeByXPath "umb:GetXmlNodeByXPath($queryXPath)">
	<!ENTITY nodeset-ns-uri "urn:schemas-microsoft-com:xslt">
	<!ENTITY tokenizeOptions "umb:Split($options, '&amp;')">
	<!ENTITY token "value">
	<!ENTITY CompleteQueryString "umb:RequestServerVariables('QUERY_STRING')">
	<!ENTITY remoteAddress "umb:RequestServerVariables('REMOTE_ADDR')">
]]>
